<html><head><title>Class LineNumberInputStream</title></head>
<!--Last split file from a FrameMaker file-->
<body bgcolor=#ffffff>

<pre><a href="javabooa.htm">Packages</a>  <a href="javac.htm">This Package</a>  <a href="javaa13.htm">Prev</a>  <a href="javad1.htm">Next</a>  <a href="javabook.htm">Index</a>  </pre>


<hr>
<a name="35244"><h1>	&#167;2.14 Class LineNumberInputStream</h1></a>
<pre>public &#32;class &#32;java.io.<strong>LineNumberInputStream
</strong>    extends &#32;java.io.<strong>FilterInputStream</strong> &#32;<a href="javaa11.htm#4538">(I-&#167;2.11)</a>
{
 &#32; &#32; &#32; &#32;// Constructors
    public <strong>LineNumberInputStream</strong>(InputStream &#32;in);	<a href="javaa14.htm#35299">&#167;2.14.1</a>

 &#32; &#32; &#32; &#32;// Methods
    public int <strong>available</strong>();	<a href="javaa14.htm#39850">&#167;2.14.2</a>
    public int <strong>getLineNumber</strong>();	<a href="javaa14.htm#35323">&#167;2.14.3</a>
    public void <strong>mark</strong>(int &#32;readlimit);	<a href="javaa14.htm#35330">&#167;2.14.4</a>
    public int <strong>read</strong>();	<a href="javaa14.htm#35348">&#167;2.14.5</a>
    public int <strong>read</strong>(byte &#32;b[], int &#32;off, int &#32;len);	<a href="javaa14.htm#35372">&#167;2.14.6</a>
    public void <strong>reset</strong>();	<a href="javaa14.htm#35403">&#167;2.14.7</a>
    public void <strong>setLineNumber</strong>(int &#32;lineNumber);	<a href="javaa14.htm#35419">&#167;2.14.8</a>
    public long <strong>skip</strong>(long &#32;n);	<a href="javaa14.htm#35428">&#167;2.14.9</a>
}
</pre><a name="35291">This class is an input stream filter that provides the added functionality of keeping track of 
the current line number. 
</a><p><a name="41438">A line is a sequence of bytes ending with either a carriage return character ('\r'), a newline 
character ('\n'), or a carriage return character followed immediately by a line feed character. In all three cases the line terminating character(s) are returned as a single newline 
character.
</a><p><a name="39685">The line number begins at zero, and is incremented by 1 when a read returns a newline 
character.
</a><p>
<hr>
<a name="35295"><h2>
<img src="images/constrct.gif" width=231 height=38 alt="Constructors"></h2></a>


<META NAME="keywords" CONTENT="LineNumberInputStream">
<a name="35299"><h3>LineNumberInputStream
</h3></a>
<a name="35300"><code>public LineNumberInputStream(InputStream &#32;in)
</code></a>
<dl>
<dd><a name="35301">Constructs a new line number input stream that reads its input from the 
specified input stream.
<pre>
</pre></a>
<dl>
<dt><a name="35302"><b>Parameters:
</b></a><dd><a name="35303"><code>in
- </code></a><a name="39845">the underlying input stream
</a>
</dl></dl>
<hr>
<a name="39846"><h2>
<img src="images/methods.gif" width=151 height=38 alt="Methods"></h2></a>


<META NAME="keywords" CONTENT="available">
<a name="39850"><h3>available
</h3></a>
<a name="35310"><code>public int available()
</code></a>
<a name="35311"><code>throws IOException
</code></a>
<dl>
<dd><a name="36555">Determines the number of bytes that can be read from this input stream 
without blocking.
<pre>
</pre></a>

<dd><a name="41440">Note that if the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> is able to supply k 
input characters without blocking, the LineNumberInputStream can guarantee 
only to provide <img src="javaab12.gif"> characters without blocking, because the k characters 
from the underlyhing input stream might consist of <img src="javaab13.gif"> pairs of '\r' and 
'\n', which are converted to just <img src="javaaa14.gif"> '\n' characters.
<pre>
</pre></a>
<dl>
<dt><a name="35313"><b>Returns:
</b></a><dd><a name="35314">the number of bytes that can be read from this input stream without 
blocking.
</a>

<dt><a name="40644"><b>Throws
</b></a><dd><a name="40648">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="40649">If an I/O error occurs.
</a>

<dt><a name="35315"><b>Overrides:
</b></a><dd><a name="35319">available in class FilterInputStream &#32;<a href="javaa11.htm#4666">(I-&#167;2.11.3)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="getLineNumber">
<a name="35323"><h3>getLineNumber
</h3></a>
<a name="35324"><code>public int getLineNumber()
</code></a>
<dl><dl>
<dt><a name="35325"><b>Returns:
</b></a><dd><a name="35326">the current line number.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="mark">
<a name="35330"><h3>mark
</h3></a>
<a name="35331"><code>public void mark(int &#32;readlimit)
</code></a>
<dl>
<dd><a name="35332">Marks the current position in this input stream. A subsequent call to the 
reset method <a href="javaa14.htm#35403">(I-&#167;2.14.7)</a> repositions this stream at the last marked position 
so that subsequent reads re-read the same bytes. 
<pre>
</pre></a>

<dd><a name="35336">The mark method of LineNumberInputStream remembers the current line 
number in a private variable, and then calls the mark method of the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>.
<pre>
</pre></a>
<dl>
<dt><a name="35337"><b>Parameters:
</b></a><dd><a name="35338"><code>readlimit
- </code></a><a name="35339">the maximum limit of bytes that can be read before the mark 
position becomes invalid.
</a>

<dt><a name="35340"><b>Overrides:
</b></a><dd><a name="35344">mark in class FilterInputStream &#32;<a href="javaa11.htm#4728">(I-&#167;2.11.5)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="read">
<a name="35348"><h3>read
</h3></a>
<a name="35349"><code>public int read()
</code></a>
<a name="35350"><code>throws IOException
</code></a>
<dl>
<dd><a name="37869">Reads the next byte of data from this input stream. The value byte is 
returned as an int in the range 0 to 255. If no byte is available because the 
end of the stream has been reached, the value -1 is returned. This method 
blocks until either input data is available, the end of the stream is detected, 
or an exception is thrown.
<pre>
</pre></a>

<dd><a name="35352">The read method of LineNumberInputStream calls the read method of the 
underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. It checks for carriage returns and 
newline characters in the input, and modifies the current line number 
<a href="javaa14.htm#35323">(I-&#167;2.14.3)</a> as appropriate. A carriage return character or a carriage return 
followed by a newline character are both converted into a single newline 
character.
<pre>
</pre></a>
<dl>
<dt><a name="35356"><b>Returns:
</b></a><dd><a name="35357">the next byte of data, or -1 if the end of this stream is reached
</a>

<dt><a name="35358"><b>Throws
</b></a><dd><a name="35362">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="35363">If an I/O error occurs.
</a>

<dt><a name="35364"><b>Overrides:
</b></a><dd><a name="35368">read in class FilterInputStream &#32;<a href="javaa11.htm#4782">(I-&#167;2.11.7)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="read">
<a name="35372"><h3>read
</h3></a>
<a name="35373"><code>public int read(byte &#32;b[], int &#32;off, int &#32;len)
</code></a>
<a name="35374"><code>throws IOException
</code></a>
<dl>
<dd><a name="35375">Reads up to len bytes of data from this input stream into an array of bytes. 
This method blocks until some input is available.
<pre>
</pre></a>

<dd><a name="35376">The read method of LineNumberInputStream repeatedly calls the read method 
of zero arguments <a href="javaa14.htm#35348">(I-&#167;2.14.5)</a> to fill in the byte array.
<pre>
</pre></a>
<dl>
<dt><a name="35380"><b>Parameters:
</b></a><dd><a name="35381"><code>b
- </code></a><a name="35382">the buffer into which the data is read
</a>
<dd><a name="35383"><code>off
- </code></a><a name="35384">the start offset of the data
</a>
<dd><a name="35385"><code>len
- </code></a><a name="35386">the maximum number of bytes read
</a>

<dt><a name="35387"><b>Returns:
</b></a><dd><a name="35388">the total number of bytes read into the buffer, or -1 is there is no more 
data because the end of this stream has been reached.
</a>

<dt><a name="35389"><b>Throws
</b></a><dd><a name="35393">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="35394">If an I/O error occurs.
</a>

<dt><a name="35395"><b>Overrides:
</b></a><dd><a name="35399">read in class FilterInputStream &#32;<a href="javaa11.htm#4860">(I-&#167;2.11.9)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="reset">
<a name="35403"><h3>reset
</h3></a>
<a name="35404"><code>public void reset()
</code></a>
<a name="35405"><code>throws IOException
</code></a>
<dl>
<dd><a name="35406">Repositions this stream to the position at the time the mark method 
<a href="javaa14.htm#35330">(I-&#167;2.14.4)</a> was last called on this input stream.
<pre>
</pre></a>

<dd><a name="35410">The reset method of LineNumberInputStream resets the line number to be the 
line number at the time the mark method was called, and then calls the 
mark method of the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>.
<pre>
</pre></a>
<dl>
<dt><a name="40656"><b>Throws
</b></a><dd><a name="40660">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="40661">If an I/O error occurs.
</a>

<dt><a name="35411"><b>Overrides:
</b></a><dd><a name="35415">reset in class FilterInputStream &#32;<a href="javaa11.htm#4912">(I-&#167;2.11.10)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setLineNumber">
<a name="35419"><h3>setLineNumber
</h3></a>
<a name="35420"><code>public void setLineNumber(int &#32;lineNumber)
</code></a>
<dl>
<dd><a name="35421">Sets the line number to the specified argument.
<pre>
</pre></a>
<dl>
<dt><a name="35422"><b>Parameters:
</b></a><dd><a name="35423"><code>lineNumber
- </code></a><a name="35424">the new line number
</a>
</dl></dl>

<META NAME="keywords" CONTENT="skip">
<a name="35428"><h3>skip
</h3></a>
<a name="35429"><code>public long skip(long &#32;n)
</code></a>
<a name="35430"><code>throws IOException
</code></a>
<dl>
<dd><a name="41325">Skips over and discards n bytes of data from the input stream. The skip 
method may, for a variety of reasons, end up skipping over some smaller 
number of bytes, possibly zero. The actual number of bytes skipped is 
returned.
<pre>
</pre></a>

<dd><a name="35432">The skip method of LineNumberInputStream creates a byte array of length n 
and then reads into it until n bytes have been read or the end of the stream 
has been reached. 
<pre>
</pre></a>
<dl>
<dt><a name="35433"><b>Parameters:
</b></a><dd><a name="35434"><code>n
- </code></a><a name="35435">the number of bytes to be skipped
</a>

<dt><a name="35436"><b>Returns:
</b></a><dd><a name="35437">the actual number of bytes skipped.
</a>

<dt><a name="35438"><b>Throws
</b></a><dd><a name="35442">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="35443">If an I/O error occurs.
</a>

<dt><a name="35444"><b>Overrides:
</b></a><dd><a name="35448">skip in class FilterInputStream &#32;<a href="javaa11.htm#4936">(I-&#167;2.11.11)</a>.
</a>
<dd><a name="35236">
</a>
</dl></dl>
<p></dl>

<hr>
<!-- This inserts footnotes--><p>
<pre><a href="javabooa.htm">Packages</a>  <a href="javac.htm">This Package</a>  <a href="javaa13.htm">Prev</a>  <a href="javad1.htm">Next</a>  <a href="javabook.htm">Index</a></pre>
<font size=-1>Java API Document (HTML generated by dkramer on April 22, 1996)<br>
<a href="copyrigh.htm">Copyright &#169 1996 Sun Microsystems, Inc.</a>
All rights reserved<br>
Please send any comments or corrections to <a href="mailto:doug.kramer@sun.com"-->doug.kramer@sun.com</a>
</font>
</body></html>
