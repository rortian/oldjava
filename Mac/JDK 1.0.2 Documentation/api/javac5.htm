<html><head><title>Class DataInputStream</title></head>
<!--Intermediate split file from a FrameMaker file-->
<body bgcolor=#ffffff>

<pre><a href="javabooa.htm">Packages</a>  <a href="javac.htm">This Package</a>  <a href="javac4.htm">Prev</a>  <a href="javac6.htm">Next</a>  <a href="javabook.htm">Index</a>  </pre>


<hr>
<a name="1604"><h1>	&#167;2.5 Class DataInputStream</h1></a>
<pre>public &#32;class &#32;java.io.<strong>DataInputStream
</strong>    extends &#32;java.io.<strong>FilterInputStream</strong> &#32;<a href="javaa11.htm#4538">(I-&#167;2.11)</a>
    implements java.io.<strong>DataInput</strong> &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
{
 &#32; &#32; &#32; &#32;// Constructors
    public <strong>DataInputStream</strong>(InputStream &#32;in);	<a href="javac5.htm#1758">&#167;2.5.1</a>

 &#32; &#32; &#32; &#32;// Methods
 &#32; &#32;public final int <strong>read</strong>(byte &#32;b[]);	<a href="javac5.htm#1780">&#167;2.5.2</a>
    public final int <strong>read</strong>(byte &#32;b[], int &#32;off, int &#32;len);	<a href="javac5.htm#1822">&#167;2.5.3</a>
    public final boolean <strong>readBoolean</strong>();	<a href="javac5.htm#1874">&#167;2.5.4</a>
    public final byte <strong>readByte</strong>();	<a href="javac5.htm#1894">&#167;2.5.5</a>
    public final char <strong>readChar</strong>();	<a href="javac5.htm#1914">&#167;2.5.6</a>
    public final double <strong>readDouble</strong>();	<a href="javac5.htm#1934">&#167;2.5.7</a>
    public final float <strong>readFloat</strong>();	<a href="javac5.htm#1954">&#167;2.5.8</a>
    public final void <strong>readFully</strong>(byte &#32;b[]);	<a href="javac5.htm#1974">&#167;2.5.9</a>
    public final void <strong>readFully</strong>(byte &#32;b[], int &#32;off, int &#32;len);	<a href="javac5.htm#2014">&#167;2.5.10</a>
    public final int <strong>readInt</strong>();	<a href="javac5.htm#30383">&#167;2.5.11</a>
    public final String <strong>readLine</strong>();	<a href="javac5.htm#2084">&#167;2.5.12</a>
    public final long <strong>readLong</strong>();	<a href="javac5.htm#2104">&#167;2.5.13</a>
    public final short <strong>readShort</strong>();	<a href="javac5.htm#2124">&#167;2.5.14</a>
    public final int <strong>readUnsignedByte</strong>();	<a href="javac5.htm#2144">&#167;2.5.15</a>
    public final int <strong>readUnsignedShort</strong>();	<a href="javac5.htm#2164">&#167;2.5.16</a>
    public final String <strong>readUTF</strong>();	<a href="javac5.htm#2184">&#167;2.5.17</a>
    public final static String <strong>readUTF</strong>(DataInput &#32;in);	<a href="javac5.htm#2202">&#167;2.5.18</a>
    public final int <strong>skipBytes</strong>(int &#32;n);	<a href="javac5.htm#2228">&#167;2.5.19</a>
}
</pre><a name="1738">A data input stream lets an application read primitive Java data types from an underlying 
input stream in a machine-independent way. An application uses a data output stream 
<a href="javac6.htm#2268">(I-&#167;2.6)</a> to write data which can later be read by a data input stream.
</a><p><a name="27157">Data input streams and data output streams represent Unicode strings in a format that is a 
slight modification of UTF-8<a href="#41091"><sup>1</sup></a> All characters in the range '\u0001' to '\u007F' are represented 
by a single byte: 
<Table Border="3">
<caption></caption>
<tr><td><a name="27162">
 <em>0</em>
</a>
<p><td><a name="27164">
 bits 0-7
</a>
<p>

</Table>

<Table>
<tr><td>
</Table>
<br>
The null character '\u0000' and characters in the range '\u0080' to '\u07FF' are represented by 
a pair of bytes: 
<Table Border="3">
<caption></caption>
<tr><td><a name="27169">
 1
</a>
<p><td><a name="27171">
 1
</a>
<p><td><a name="27173">
 0
</a>
<p><td><a name="27175">
 bits 6-10
</a>
<p><td><a name="27177">
 
</a>
<p><td><a name="27179">
 1
</a>
<p><td><a name="27181">
 0
</a>
<p><td><a name="27183">
 bits 0-5 
</a>
<p>

</Table>

<Table>
<tr><td>
</Table>
<br>
Characters in the range '\u0800' to '\uFFFF' are represented by three bytes: 
<Table Border="3">
<caption></caption>
<tr><td><a name="27188">
 1
</a>
<p><td><a name="27190">
 1
</a>
<p><td><a name="27192">
 1
</a>
<p><td><a name="27194">
 0
</a>
<p><td><a name="27196">
 bits 12-15
</a>
<p><td><a name="27198">
 
</a>
<p><td><a name="27200">
 1
</a>
<p><td><a name="27202">
 0
</a>
<p><td><a name="27253">
 bits 6-11
</a>
<p><td><a name="27206">
 
</a>
<p><td><a name="27208">
 1
</a>
<p><td><a name="27210">
 0
</a>
<p><td><a name="27249">
 bits 0-5 
</a>
<p>

</Table>

<Table>
<tr><td>
</Table>

</a><p><a name="27216">The two differences between this format and the "standard" UTF-8 format are the following:
</a><p><ul><li><a name="27282">The null byte'\u0000' is encoded in two-byte format rather than one-byte, so that the encoded strings never have embedded nulls.
</a><li><a name="27283">Only the one-byte, two-byte, and three-byte formats are used.
</a></ul>
<hr>
<a name="27285"><h2>
<img src="images/constrct.gif" width=231 height=38 alt="Constructors"></h2></a>


<META NAME="keywords" CONTENT="DataInputStream">
<a name="1758"><h3>DataInputStream
</h3></a>
<a name="1760"><code>public DataInputStream(InputStream &#32;in)
</code></a>
<dl>
<dd><a name="26737">Creates a new data input stream to read data from the specified input 
stream.
<pre>
</pre></a>
<dl>
<dt><a name="1764"><b>Parameters:
</b></a><dd><a name="1766"><code>in
- </code></a><a name="1768">the input stream
</a>
</dl></dl>
<hr>
<a name="1770"><h2>
<img src="images/methods.gif" width=151 height=38 alt="Methods"></h2></a>


<META NAME="keywords" CONTENT="read">
<a name="1780"><h3>read
</h3></a>
<a name="1782"><code>public final int read(byte &#32;b[])
</code></a>
<a name="1784"><code>throws IOException
</code></a>
<dl>
<dd><a name="36818">Reads up to byte.length bytes of data from this data input stream into an 
array of bytes. This method blocks until some input is available.
<pre>
</pre></a>

<dd><a name="36820">The read method of DataInputStream calls the the read method <a href="javaa13.htm#5558">(I-&#167;2.13.8)</a> of 
its underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> with the three arguments b, 0, and 
b.length, and returns whatever value that method returns.
<pre>
</pre></a>
<dl>
<dt><a name="1788"><b>Parameters:
</b></a><dd><a name="1790"><code>b
- </code></a><a name="1792">the buffer into which the data is read
</a>

<dt><a name="38048"><b>Returns:
</b></a><dd><a name="38049">the total number of bytes read into the buffer, or -1 is there is no more 
data because the end of the stream has been reached.
</a>

<dt><a name="1798"><b>Throws
</b></a><dd><a name="1804">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="1806">If an I/O error occurs.
</a>

<dt><a name="1808"><b>Overrides:
</b></a><dd><a name="1814">read in class FilterInputStream &#32;<a href="javaa11.htm#4818">(I-&#167;2.11.8)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="read">
<a name="1822"><h3>read
</h3></a>
<a name="1824"><code>public final int read(byte &#32;b[], int &#32;off, int &#32;len)
</code></a>
<a name="26755"><code>throws IOException
</code></a>
<dl>
<dd><a name="36829">Reads up to len bytes of data from this data input stream into an array of 
bytes. This method blocks until some input is available.
<pre>
</pre></a>

<dd><a name="36830">The read method of DataInputStream calls the read method <a href="javaa13.htm#5558">(I-&#167;2.13.8)</a> of its 
underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> with the same arguments and returns 
whatever value that method returns.
<pre>
</pre></a>
<dl>
<dt><a name="26757"><b>Parameters:
</b></a><dd><a name="26758"><code>b
- </code></a><a name="26759">the buffer into which the data is read
</a>
<dd><a name="26760"><code>off
- </code></a><a name="26761">the start offset of the data
</a>
<dd><a name="26762"><code>len
- </code></a><a name="26763">the maximum number of bytes read
</a>

<dt><a name="26764"><b>Returns:
</b></a><dd><a name="26765">the total number of bytes read into the buffer, or -1 is there is no more 
data because the end of the stream has been reached.
</a>

<dt><a name="1848"><b>Throws
</b></a><dd><a name="1854">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="1856">If an I/O error occurs.
</a>

<dt><a name="1858"><b>Overrides:
</b></a><dd><a name="1864">read in class FilterInputStream &#32;<a href="javaa11.htm#4860">(I-&#167;2.11.9)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readBoolean">
<a name="1874"><h3>readBoolean
</h3></a>
<a name="1876"><code>public final boolean readBoolean()
</code></a>
<a name="1878"><code>throws IOException
</code></a>
<dl>
<dd><a name="26780">Reads a boolean from this data input stream. This method reads a single 
byte from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. A value of 0 represents 
false. Any other value represents true. This method blocks until either the 
byte is read, the end of the stream is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="26781"><b>Returns:
</b></a><dd><a name="1884">the boolean value read.
</a>

<dt><a name="26790"><b>Throws
</b></a><dd><a name="26794">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="26795">If this input stream has reached the end.
</a>

<dt><a name="26783"><b>Throws
</b></a><dd><a name="26787">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26788">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readByte">
<a name="1894"><h3>readByte
</h3></a>
<a name="1896"><code>public final byte readByte()
</code></a>
<a name="38257"><code>throws IOException
</code></a>
<dl>
<dd><a name="38261">Reads a signed 8-bit value from this data input stream. This method reads 
a byte from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If the byte read is b, 
where <img src="javaab7.gif">, then the result is
<pre>
</pre></a>
<ul><a name="41099">
<code>	(byte)(b)
</code>
</a>
<dt><a name="41100"><b>This method blocks until either the byte is read, the end of the stream is 
detected, or an exception is thrown.
</b></a>
<dt><a name="41102"><b>Returns:
</b></a><dd><a name="41101">the next byte of this input stream as a signed 8-bit byte.
</a>

<dt><a name="26811"><b>Throws
</b></a><dd><a name="26815">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="26816">If this input stream has reached the end.
</a>

<dt><a name="26817"><b>Throws
</b></a><dd><a name="26821">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26822">If an I/O error occurs.
</a>
</ul></dl>

<META NAME="keywords" CONTENT="readChar">
<a name="1914"><h3>readChar
</h3></a>
<a name="1916"><code>public final char readChar()
</code></a>
<a name="1918"><code>throws IOException
</code></a>
<dl>
<dd><a name="36885">Reads a Unicode character from this data input stream. This method reads 
two bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If the bytes read, 
in order, are b1 and b2, where <img src="javaab8.gif">, then the result is equal to 
<pre>
</pre></a>
<ul><a name="38577">
<code>	(char)((b1 &lt;&lt; 8) | b2)
</code>
</a>
<dt><a name="41106"><b>This method blocks until either the two bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="1922"><b>Returns:
</b></a><dd><a name="1924">the next two bytes of this input stream as an Unicode character.
</a>

<dt><a name="26824"><b>Throws
</b></a><dd><a name="26828">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40962">If this input stream reaches the end before reading two bytes.
</a>

<dt><a name="26830"><b>Throws
</b></a><dd><a name="26834">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26835">If an I/O error occurs.
</a>
</ul></dl>

<META NAME="keywords" CONTENT="readDouble">
<a name="1934"><h3>readDouble
</h3></a>
<a name="1936"><code>public final double readDouble()
</code></a>
<a name="1938"><code>throws IOException
</code></a>
<dl>
<dd><a name="38371">Reads a double from this data input stream. This method reads a long value 
as if by the readLong method <a href="javac5.htm#2104">(I-&#167;2.5.13)</a> and then converts that long to a double using the long-Bits-To-Double method <a href="javaa6.htm#2720">(I-&#167;1.6.18)</a> in class Double.
<pre>
</pre></a>
<dl>
<dt><a name="41110"><b>This method blocks until either the eight bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="27043"><b>Returns:
</b></a><dd><a name="1944">the next eight bytes of this input stream, interpreted as a double.
</a>

<dt><a name="26837"><b>Throws
</b></a><dd><a name="26841">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40964">If this input stream reaches the end before reading eight bytes.
</a>

<dt><a name="26843"><b>Throws
</b></a><dd><a name="26847">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26848">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readFloat">
<a name="1954"><h3>readFloat
</h3></a>
<a name="1956"><code>public final float readFloat()
</code></a>
<a name="1958"><code>throws IOException
</code></a>
<dl>
<dd><a name="38433">Reads a float from this data input stream. This method reads an int value as 
if by the readInt method <a href="javac5.htm#30383">(I-&#167;2.5.11)</a> and then converts that int to a float using 
the intBitsToFloat method <a href="javaa7.htm#3240">(I-&#167;1.7.14)</a> in class Float. This method blocks until 
either the four bytes are read, the end of the stream is detected, or an 
exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="27048"><b>Returns:
</b></a><dd><a name="1964">the next four bytes of this input stream, interpreted as a float.
</a>

<dt><a name="26850"><b>Throws
</b></a><dd><a name="26854">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40968">If this input stream reaches the end before reading four bytes.
</a>

<dt><a name="26856"><b>Throws
</b></a><dd><a name="26860">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26861">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readFully">
<a name="1974"><h3>readFully
</h3></a>
<a name="1976"><code>public final void readFully(byte &#32;b[])
</code></a>
<a name="1978"><code>throws IOException
</code></a>
<dl>
<dd><a name="1980">Reads b.length bytes from this data input stream into the byte array. This 
method reads repeatedly from the underlying stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> until all 
the bytes are read. This method blocks until either all the bytes are read, 
the end of the stream is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="27033"><b>Parameters:
</b></a><dd><a name="1984"><code>b
- </code></a><a name="1986">the buffer into which the data is read
</a>

<dt><a name="1998"><b>Throws
</b></a><dd><a name="2004">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40972">If this input stream reaches the end before reading all the bytes.
</a>

<dt><a name="40429"><b>Throws
</b></a><dd><a name="40433">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="40434">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readFully">
<a name="2014"><h3>readFully
</h3></a>
<a name="2016"><code>public final void readFully(byte &#32;b[], int &#32;off, int &#32;len)
</code></a>
<a name="2018"><code>throws IOException
</code></a>
<dl>
<dd><a name="38591">Reads exactly len bytes from this data input stream into the byte array. This 
method reads repeatedly from the underlying stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> until all 
the bytes are read. This method blocks until either all the bytes are read, 
the end of the stream is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="27051"><b>Parameters:
</b></a><dd><a name="27052"><code>b
- </code></a><a name="27053">the buffer into which the data is read
</a>
<dd><a name="27054"><code>off
- </code></a><a name="27055">the start offset of the data
</a>
<dd><a name="27056"><code>len
- </code></a><a name="27057">the number of bytes to read read
</a>

<dt><a name="2046"><b>Throws
</b></a><dd><a name="2052">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40976">If this input stream reaches the end before reading all the bytes.
</a>

<dt><a name="40438"><b>Throws
</b></a><dd><a name="40442">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="40443">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readInt">
<a name="30383"><h3>readInt
</h3></a>
<a name="30384"><code>public final int readInt()
</code></a>
<a name="26886"><code>throws IOException
</code></a>
<dl>
<dd><a name="38833">Reads a signed 32-bit integer from this data input stream. This method 
reads four bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If the bytes 
read, in order, are b1, b2, b3, and b4 where <img src="javaab9.gif">, then 
the result is equal to
<pre>
</pre></a>
<ul><a name="38474">
<code>	(b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4
</code>
</a>
<dt><a name="41128"><b>This method blocks until either the four bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="27072"><b>Returns:
</b></a><dd><a name="27073">the next four bytes of this input stream, interpreted as an int.
</a>

<dt><a name="26888"><b>Throws
</b></a><dd><a name="26892">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40980">If this input stream reaches the end before reading two bytes.
</a>

<dt><a name="26894"><b>Throws
</b></a><dd><a name="26898">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26899">If an I/O error occurs.
</a>
</ul></dl>

<META NAME="keywords" CONTENT="readLine">
<a name="2084"><h3>readLine
</h3></a>
<a name="2086"><code>public final String readLine()
</code></a>
<a name="37198"><code>throws IOException
</code></a>
<dl>
<dd><a name="37199">Reads the next line of text from this data input stream. This method successively reads bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> until it 
reaches the end of a line of text.
<pre>
</pre></a>

<dd><a name="37200">A line of text is terminated by a carriage return character ('\r'), a newline 
character ('\n'), a carriage return character immediately followed by a newline character, or the end of the input stream. The line-terminating character(s), if any, are included as part of the string returned.
<pre>
</pre></a>
<dl>
<dt><a name="41132"><b>This method blocks until either a newline character is read, a carriage 
return and the byte following it are read (to see if it is a newline), the end 
of the stream is detected, or an exception is thrown.
</b></a>
<dt><a name="40983"><b>Returns:
</b></a><dd><a name="40984">the next line of text from this input stream.
</a>

<dt><a name="40985"><b>Throws
</b></a><dd><a name="40989">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26912">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readLong">
<a name="2104"><h3>readLong
</h3></a>
<a name="2106"><code>public final long readLong()
</code></a>
<a name="27107"><code>throws IOException
</code></a>
<dl>
<dd><a name="38858">Reads a signed 64-bit integer from this data input stream. This method 
reads eight bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If the bytes 
read, in order, are b1, b2, b3, b4, b5, b6, b7, and b8, where
<pre>
</pre></a>

<dd><a name="38884"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;<img src="javaab10.gif">,
<pre>
</pre></a>

<dd><a name="38890">then the result is equal to
<pre>
</pre></a>
<ul><a name="38546">
<code>	((long)b1 &lt;&lt; 56) +((long)b2 &lt;&lt; 48) + <br>
	  &#32; &#32;((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)+<br>
 &#32; &#32;	  &#32; &#32;((long)b5 &lt;&lt; 24) + (b6 &lt;&lt; 16) + &#32;<br>
	 &#32; &#32; &#32;		(b7 &lt;&lt; 8) + b8
</code>
</a>
<dt><a name="41145"><b>This method blocks until either the eight bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="38547"><b>Returns:
</b></a><dd><a name="38548">the next eight bytes of this input stream, interpreted as a long.
</a>

<dt><a name="26914"><b>Throws
</b></a><dd><a name="26918">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40991">If this input stream reaches the end before reading eight bytes.
</a>

<dt><a name="26920"><b>Throws
</b></a><dd><a name="26924">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26925">If an I/O error occurs.
</a>
</ul></dl>

<META NAME="keywords" CONTENT="readShort">
<a name="2124"><h3>readShort
</h3></a>
<a name="2126"><code>public final short readShort()
</code></a>
<a name="2128"><code>throws IOException
</code></a>
<dl>
<dd><a name="38702">Reads a signed 16-bit number from this data input stream. The method 
reads two bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If the two 
bytes read, in order, are b1 and b2, where each of the two values is between 
0 and 255, inclusive, then the result is equal to:
<pre>
</pre></a>

<dd><a name="38557"> &#32; &#32; &#32; &#32;(short)((b1 &lt;&lt; 8) | b2)
<pre>
</pre></a>
<dl>
<dt><a name="41149"><b>This method blocks until either the two bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="2132"><b>Returns:
</b></a><dd><a name="27120">the next two bytes of this input stream, interpreted as a signed 16-bit 
number.
</a>

<dt><a name="26927"><b>Throws
</b></a><dd><a name="26931">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40995">If this input stream reaches the end before reading two bytes.
</a>

<dt><a name="26933"><b>Throws
</b></a><dd><a name="26937">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26938">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readUnsignedByte">
<a name="2144"><h3>readUnsignedByte
</h3></a>
<a name="2146"><code>public final int readUnsignedByte()
</code></a>
<a name="2148"><code>throws IOException
</code></a>
<dl>
<dd><a name="41156">Reads an unsigned 8-bit number from this data input stream. This method 
reads a byte from this data input stream's underlying input stream 
<a href="javaa11.htm#4628">(I-&#167;2.11.1)</a> and returns that byte This method blocks until either the byte is 
are read, the end of the stream is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="2152"><b>Returns:
</b></a><dd><a name="2154">the next byte of this input stream, interpreted as an unsigned 8-bit 
number.
</a>

<dt><a name="26940"><b>Throws
</b></a><dd><a name="26944">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="40997">If this input stream has reached the end.
</a>

<dt><a name="26946"><b>Throws
</b></a><dd><a name="26950">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26951">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readUnsignedShort">
<a name="2164"><h3>readUnsignedShort
</h3></a>
<a name="2166"><code>public final int readUnsignedShort()
</code></a>
<a name="2168"><code>throws IOException
</code></a>
<dl>
<dd><a name="38894">Reads an unsigned 16-bit number from this data input stream. This 
method reads two bytes from the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. If 
the bytes read, in order, are b1 and b2, where <img src="javaab11.gif">, then the 
result is equal to 
<pre>
</pre></a>
<ul><a name="38571">
<code>	(b1 &lt;&lt; 8) | b2
</code>
</a>
<dt><a name="41162"><b>This method blocks until either the two bytes are read, the end of the 
stream is detected, or an exception is thrown.
</b></a>
<dt><a name="2172"><b>Returns:
</b></a><dd><a name="2174">the next two bytes of this input stream, interprted as an unsigned 16-
bit integer.
</a>

<dt><a name="26953"><b>Throws
</b></a><dd><a name="26957">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="41001">If this input stream reaches the end before reading two bytes.
</a>

<dt><a name="26959"><b>Throws
</b></a><dd><a name="26963">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26964">If an I/O error occurs.
</a>
</ul></dl>

<META NAME="keywords" CONTENT="readUTF">
<a name="2184"><h3>readUTF
</h3></a>
<a name="2186"><code>public final String readUTF()
</code></a>
<a name="2188"><code>throws IOException
</code></a>
<dl>
<dd><a name="2190">Reads in a string which has been encoded using a modified UTF-8 format 
from this data input stream. This method calls readUTF(this). See the following method for a more complete description of the format. 
<pre>
</pre></a>

<dd><a name="41194">This method blocks until either all the bytes are read, the end of the stream 
is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="2192"><b>Returns:
</b></a><dd><a name="2194">a Unicode string.
</a>

<dt><a name="26966"><b>Throws
</b></a><dd><a name="26970">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="41003">If this input stream reaches the end before reading all the bytes.
</a>

<dt><a name="26972"><b>Throws
</b></a><dd><a name="26976">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26977">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="readUTF">
<a name="2202"><h3>readUTF
</h3></a>
<a name="2204"><code>public final static String readUTF(DataInput &#32;in)
</code></a>
<a name="2206"><code>throws IOException
</code></a>
<dl>
<dd><a name="27142">Reads in a string from the specified data input stream. The string has been 
encoded using a modified using a modified UTF-8 format.
<pre>
</pre></a>

<dd><a name="27313">The first two bytes from are read as if by readUnsignedShort <a href="javac5.htm#2164">(I-&#167;2.5.16)</a>. This 
values gives the number of following bytes that are in the encoded string. 
(Note: <em>not</em> the length of the resuling string). The following bytes are then 
interpreted as bytes encoding characters in the UTF-8 format <a href="javac5.htm#27157">(page &#32;I-225)</a> 
and are converted into characters.
<pre>
</pre></a>
<dl>
<dt><a name="41168"><b>This method blocks until all the bytes are read, the end of the stream is 
detected, or an exception is thrown.
</b></a>
<dt><a name="2210"><b>Parameters:
</b></a><dd><a name="2212"><code>in
- </code></a><a name="2214">a data input stream
</a>

<dt><a name="2216"><b>Returns:
</b></a><dd><a name="2218">a Unicode string.
</a>

<dt><a name="26983"><b>Throws
</b></a><dd><a name="26987">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="41007">If the input stream reaches the end before all the bytes.
</a>

<dt><a name="27390"><b>Throws
</b></a><dd><a name="27394">UTFDataFormatException &#32;<a href="javaa17.htm#10470">(I-&#167;2.31)</a>
</a>
<dd><a name="27395">If the bytes do not represent a valid UTF-8 encoding of a Unicode 
string.
</a>

<dt><a name="26989"><b>Throws
</b></a><dd><a name="26993">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="26994">If an I/O error occurs.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="skipBytes">
<a name="2228"><h3>skipBytes
</h3></a>
<a name="2230"><code>public final int skipBytes(int &#32;n)
</code></a>
<a name="2232"><code>throws IOException
</code></a>
<dl>
<dd><a name="2234">Skips exactly n bytes of input in the underlying input stream <a href="javaa11.htm#4628">(I-&#167;2.11.1)</a>. 
This method blocks until either all the bytes are skipped, the end of the 
stream is detected, or an exception is thrown.
<pre>
</pre></a>
<dl>
<dt><a name="2236"><b>Parameters:
</b></a><dd><a name="2238"><code>n
- </code></a><a name="2240">the number of bytes to be skipped
</a>

<dt><a name="2242"><b>Returns:
</b></a><dd><a name="2244">the number of bytes skipped, which is always n.
</a>

<dt><a name="26996"><b>Throws
</b></a><dd><a name="27000">EOFException &#32;<a href="javab10.htm#36268">(I-&#167;2.24)</a>
</a>
<dd><a name="41014">If this input stream reaches the end before skipping all the bytes.
</a>

<dt><a name="27002"><b>Throws
</b></a><dd><a name="27006">IOException &#32;<a href="javaa15.htm#10278">(I-&#167;2.29)</a>
</a>
<dd><a name="27007">If an I/O error occurs.
</a>
</dl></dl>

<hr>
<sup>1</sup><!--"Footnote" is same tag as body.-->
<a name="41091">X/Open Company Ltd., "File System Safe UCS Transformation Format 
(FSS_UTF)", X/Open Preliminary Specification, Document Number: P316. This 
information also appears in ISO/IEC 10646, Annex P.
</a><p><!-- This inserts footnotes--><p>
<pre><a href="javabooa.htm">Packages</a>  <a href="javac.htm">This Package</a>  <a href="javac4.htm">Prev</a>  <a href="javac6.htm">Next</a>  <a href="javabook.htm">Index</a></pre>
<font size=-1>Java API Document (HTML generated by dkramer on April 22, 1996)<br>
<a href="copyrigh.htm">Copyright &#169 1996 Sun Microsystems, Inc.</a>
All rights reserved<br>
Please send any comments or corrections to <a href="mailto:doug.kramer@sun.com"-->doug.kramer@sun.com</a>
</font>
</body></html>
