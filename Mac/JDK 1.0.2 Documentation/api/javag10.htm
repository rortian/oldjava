<html><head><title>Interface ImageConsumer</title></head>
<!--Intermediate split file from a FrameMaker file-->
<body bgcolor=#ffffff>

<pre><a href="javabooa.htm">Packages</a>  <a href="javak.htm">This Package</a>  <a href="javai9.htm">Prev</a>  <a href="javag11.htm">Next</a>  <a href="javabook.htm">Index</a>  </pre>


<hr>
<a name="999415"><h1>	&#167;2.10 Interface ImageConsumer</h1></a>
<pre>public &#32;interface &#32;java.awt.image.<strong>ImageConsumer
</strong>{
 &#32; &#32; &#32; &#32;  // status value for the <strong>imageComplete</strong> method
 &#32; &#32; &#32; &#32;public final static int <strong>IMAGEABORTED</strong>;	<a href="javag10.htm#999495">&#167;2.10.1</a>
 &#32; &#32; &#32; &#32;public final static int <strong>IMAGEERROR</strong>;	<a href="javag10.htm#999504">&#167;2.10.2</a>
 &#32; &#32; &#32; &#32;public final static int <strong>SINGLEFRAMEDONE</strong>;	<a href="javag10.htm#999513">&#167;2.10.3</a>
 &#32; &#32; &#32; &#32;public final static int <strong>STATICIMAGEDONE</strong>;	<a href="javag10.htm#999522">&#167;2.10.4</a>

 &#32; &#32; &#32; &#32;  // hints used by the <strong>setHints</strong> method
 &#32; &#32; &#32; &#32;public final static int <strong>COMPLETESCANLINES</strong>;	<a href="javag10.htm#999531">&#167;2.10.5</a>
 &#32; &#32; &#32; &#32;public final static int <strong>RANDOMPIXELORDER</strong>;	<a href="javag10.htm#999540">&#167;2.10.6</a>
 &#32; &#32; &#32; &#32;public final static int <strong>SINGLEFRAME</strong>;	<a href="javag10.htm#999550">&#167;2.10.7</a>
 &#32; &#32; &#32; &#32;public final static int <strong>SINGLEPASS</strong>;	<a href="javag10.htm#999572">&#167;2.10.8</a>
 &#32; &#32; &#32; &#32;public final static int <strong>TOPDOWNLEFTRIGHT</strong>;	<a href="javag10.htm#999582">&#167;2.10.9</a>

 &#32; &#32; &#32; &#32;  // Methods
 &#32; &#32; &#32; &#32;public abstract void <strong>imageComplete</strong>(int &#32;status);	<a href="javag10.htm#999592">&#167;2.10.10</a>
 &#32; &#32; &#32; &#32;public abstract void <strong>setColorModel</strong>(ColorModel &#32;model);	<a href="javag10.htm#999623">&#167;2.10.11</a>
 &#32; &#32; &#32; &#32;public abstract void	<a href="javag10.htm#999637">&#167;2.10.12</a>
             <strong>setDimensions</strong>(int &#32;width, int &#32;height);
        public abstract void <strong>setHints</strong>(int &#32;hintflags);	<a href="javag10.htm#999648">&#167;2.10.13</a>
 &#32; &#32; &#32; &#32;public abstract void 	<a href="javag10.htm#999677">&#167;2.10.14</a>
             <strong>setPixels</strong>(int &#32;x, int &#32;y, int &#32;w, int &#32;h,
         &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;ColorModel &#32;model, byte &#32;pixels[],
         &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;int &#32;off, int &#32;scansize);
        public abstract void	<a href="javag10.htm#999709">&#167;2.10.15</a>
             <strong>setPixels</strong>(int &#32;x, int &#32;y, int &#32;w, int &#32;h,
         &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;ColorModel &#32;model, int &#32;pixels[],
         &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;int &#32;off, int &#32;scansize);
        public abstract void <strong>setProperties</strong>(Hashtable &#32;props); <a href="javag10.htm#999739">&#167;2.10.16</a>
}
</pre><a name="999486">The image consumer interface specifies the methods that all image consumers must implement. An image consumer is an object interested in data produced by the image producers 
<a href="javaf12.htm#999977">(II-&#167;2.12)</a>. 
</a><p><a name="999490">When a consumer is added to an image producer, the producer delivers all the data about 
the image using the method calls defined in this interface.
</a><p>
<hr>
<a name="999491"><h2>
<img src="images/fields.gif" width=153 height=38 alt="Fields"></h2></a>


<META NAME="keywords" CONTENT="IMAGEABORTED">
<a name="999495"><h3>IMAGEABORTED
</h3></a>
<a name="999496"><code>public final static int IMAGEABORTED = 4
</code></a>
<dl>
<dd><a name="999500">Argument to the imageComplete method <a href="javag10.htm#999592">(II-&#167;2.10.10)</a> indicating that the 
image creation process was deliberately aborted.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="IMAGEERROR">
<a name="999504"><h3>IMAGEERROR
</h3></a>
<a name="999505"><code>public final static int IMAGEERROR = 1
</code></a>
<dl>
<dd><a name="999509">Argument to the imageComplete method <a href="javag10.htm#999592">(II-&#167;2.10.10)</a> indicating that an 
error was encountered while producing the image.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="SINGLEFRAMEDONE">
<a name="999513"><h3>SINGLEFRAMEDONE
</h3></a>
<a name="999514"><code>public final static int SINGLEFRAMEDONE = 2
</code></a>
<dl>
<dd><a name="999518">Argument to the imageComplete method <a href="javag10.htm#999592">(II-&#167;2.10.10)</a> indicating that one 
frame of the image is complete but there are more frames to be delivered.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="STATICIMAGEDONE">
<a name="999522"><h3>STATICIMAGEDONE
</h3></a>
<a name="999523"><code>public final static int STATICIMAGEDONE = 3
</code></a>
<dl>
<dd><a name="999527">Argument to the imageComplete method <a href="javag10.htm#999592">(II-&#167;2.10.10)</a> indicating that the 
image is complete and there are no more pixels or frames to be delivered.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="COMPLETESCANLINES">
<a name="999531"><h3>COMPLETESCANLINES
</h3></a>
<a name="999532"><code>public final static int COMPLETESCANLINES = 4
</code></a>
<dl>
<dd><a name="999536">Flag in the setHints method <a href="javag10.htm#999648">(II-&#167;2.10.13)</a> indicating that the pixels will be 
delivered in (multiples of) complete scanlines at a time..
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="RANDOMPIXELORDER">
<a name="999540"><h3>RANDOMPIXELORDER
</h3></a>
<a name="999541"><code>public final static int RANDOMPIXELORDER = 1
</code></a>
<dl>
<dd><a name="999545">Flag in the setHints method <a href="javag10.htm#999648">(II-&#167;2.10.13)</a> indicating that the pixels will be 
delivered in a random order. 
<pre>
</pre></a>

<dd><a name="999546">The image consumer should not use any optimizations that depend on the 
order of pixel delivery. If the image producer doesn't call the setHints 
method, the image consumer should assume that the bits are being delivered in a random order..
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="SINGLEFRAME">
<a name="999550"><h3>SINGLEFRAME
</h3></a>
<a name="999551"><code>public final static int SINGLEFRAME = 8
</code></a>
<dl>
<dd><a name="999555">Flag in the setHints method <a href="javag10.htm#999648">(II-&#167;2.10.13)</a> indicating that the image contains 
a single static image. The pixels will be defined in calls to the setPixels 
methods; the image producer then calls the imageComplete method 
<a href="javag10.htm#999592">(II-&#167;2.10.10)</a> with the STATICIMAGEDONE flag <a href="javag10.htm#999522">(II-&#167;2.10.4)</a> after which no 
more image data is delivered. 
<pre>
</pre></a>

<dd><a name="999562">Examples of image types that do not meet these criteria include the output 
of a video feed, or the representation of a 3D rendering being manipulated 
by the user. The end of each frame of those types of images is indicated by 
the image producer calling the imageComplete method <a href="javag10.htm#999592">(II-&#167;2.10.10)</a> with 
the SINGLEFRAMEDONE flag <a href="javag10.htm#999522">(II-&#167;2.10.4)</a>.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="SINGLEPASS">
<a name="999572"><h3>SINGLEPASS
</h3></a>
<a name="999573"><code>public final static int SINGLEPASS = 8
</code></a>
<dl>
<dd><a name="999577">Flag in the setHints method <a href="javag10.htm#999648">(II-&#167;2.10.13)</a> indicating that each pixel will be 
delivered only once. 
<pre>
</pre></a>

<dd><a name="999578">An image type that does not meet this criterion is a progressive JPEG 
image which defines pixels in multple passes, each more refined than the 
previous.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="TOPDOWNLEFTRIGHT = 2">
<a name="999582"><h3>TOPDOWNLEFTRIGHT = 2
</h3></a>
<a name="999583"><code>public final static int TOPDOWNLEFTRIGHT
</code></a>
<dl>
<dd><a name="999587">Flag in the setHints method <a href="javag10.htm#999648">(II-&#167;2.10.13)</a> indicating that the pixels will be 
delivered in a top-down, left-to-right order. 
<pre>
</pre></a>
</dl>
<hr>
<a name="999588"><h2>
<img src="images/methods.gif" width=151 height=38 alt="Methods"></h2></a>


<META NAME="keywords" CONTENT="imageComplete">
<a name="999592"><h3>imageComplete
</h3></a>
<a name="999593"><code>public abstract void imageComplete(int &#32;status)
</code></a>
<dl>
<dd><a name="999594">The image producer calls the imageComplete method when one of the following conditions has occurred: 
<pre>
</pre></a>
<dl><ul><li><a name="999595">it has delivered all the pixels that the source image contains,
</a></ul><ul><li><a name="999596">a single frame of a multi-frame animation has been completed, 
</a><li><a name="999597">an error in loading or producing the image has occurred.
</a><li><a name="999598">the image production was explicitly aborted by the application.
</a></ul></dl>
<dd><a name="999599">The image consumer should remove itself from the list of consumers registered with the image producer <a href="javaf12.htm#1000033">(II-&#167;2.12.3)</a>, unless it is interested in subsequent frames.
<pre>
</pre></a>

<dd><a name="999603">The status is one of the following values:
<pre>
</pre></a>
<a name="999607">
 ImageConsumer.IMAGEERROR <a href="javag10.htm#999504">(II-&#167;2.10.2)</a><br>ImageConsumer.SINGLEFRAMEDONE <a href="javag10.htm#999550">(II-&#167;2.10.7)</a><br>ImageConsumer.STATICIMAGEDONE <a href="javag10.htm#999522">(II-&#167;2.10.4)</a><br>ImageConsumer.IMAGEABORTED <a href="javag10.htm#999495">(II-&#167;2.10.1)</a>
</a>
<p><dl>
<dt><a name="999617"><b>Parameters:
</b></a><dd><a name="999618"><code>status
- </code></a><a name="999619">the status of the image
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setColorModel">
<a name="999623"><h3>setColorModel
</h3></a>
<a name="999624"><code>public abstract void setColorModel(ColorModel &#32;model)
</code></a>
<dl>
<dd><a name="999625">The image producer calls the setColorModel method to specify the color 
model <a href="javak1.htm#996814">(II-&#167;2.1)</a> for the majority of the subsequent setPixels method calls.
<pre>
</pre></a>

<dd><a name="999629">Each set of pixels delivered using the setPixels method includes its own 
color model, so the image consumer should not assume that the model 
argument is the color model argument in every subsequent setPixels method 
call.
<pre>
</pre></a>

<dd><a name="999630">A notable case where multiple ColorModel objects may be seen is a filtered image where for each set of pixels that it filters, the filter determines 
whether the pixels can be sent on untouched, using the original ColorModel, or should be modified (filtered) and passed on using a ColorModel 
more convenient for the filtering process.
<pre>
</pre></a>
<dl>
<dt><a name="999631"><b>Parameters:
</b></a><dd><a name="999632"><code>model
- </code></a><a name="999633">a color map used in subsequent setPixel calls
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setDimensions">
<a name="999637"><h3>setDimensions
</h3></a>
<a name="999638"><code>public abstract void<br>
setDimensions(int &#32;width, int &#32;height)
</code></a>
<dl>
<dd><a name="999639">The image producer calls the setDimensions of the image consumer to indicate the width and height of the image.
<pre>
</pre></a>
<dl>
<dt><a name="999640"><b>Parameters:
</b></a><dd><a name="999641"><code>width
- </code></a><a name="999642">the width of the image
</a>
<dd><a name="999643"><code>height
- </code></a><a name="999644">the height of the image
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setHints">
<a name="999648"><h3>setHints
</h3></a>
<a name="999649"><code>public abstract void setHints(int &#32;hintflags)
</code></a>
<dl>
<dd><a name="999650">The image producer calls the setHints method of the image consumer to 
indicate the order in which the bits will be delivered. 
<pre>
</pre></a>

<dd><a name="999651">The image producer is allowed to deliver the pixels in any order, but the 
image consumer may be able to scale or convert the pixels more efficiently 
or with higher quality if it knows some information about how the pixels 
will be presented. 
<pre>
</pre></a>

<dd><a name="999652">The image producer should call the setHints method before any calls to the 
image consumer's setPixels method. 
<pre>
</pre></a>

<dd><a name="999653">The hintflags agument is a bit mask of hints about the manner in which the 
pixels are delivered.
<pre>
</pre></a>

<dd><a name="999654">The possible hint flags are:
<pre>
</pre></a>
<a name="999658">
 COMPLETESCANLINES <a href="javag10.htm#999531">(II-&#167;2.10.5)</a><br>RANDOMPIXELORDER <a href="javag10.htm#999531">(II-&#167;2.10.5)</a><br>SINGLEFRAME <a href="javag10.htm#999531">(II-&#167;2.10.5)</a><br>SINGLEPASS <a href="javag10.htm#999531">(II-&#167;2.10.5)</a><br>TOPDOWNLEFTRIGHT <a href="javag10.htm#999531">(II-&#167;2.10.5)</a>
</a>
<p><dl>
<dt><a name="999671"><b>Parameters:
</b></a><dd><a name="999672"><code>hints
- </code></a><a name="999673">hints about the order in which the bits will be delivered
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setPixels">
<a name="999677"><h3>setPixels
</h3></a>
<a name="999678"><code>public abstract void<br>
setPixels(int &#32;x, int &#32;y, int &#32;w, int &#32;h, ColorModel model, <br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;byte &#32;pixels[], int &#32;off, &#32;int &#32;scansize)
</code></a>
<dl>
<dd><a name="999679">The image producer calls the setPixels method of the image consumer one 
or more times to deliver the pixels of the image. Each call specifies the 
location and size of the rectangle of source pixels contained in the array of 
pixels. 
<pre>
</pre></a>

<dd><a name="999680">The specified color model object should be used to convert the pixels into 
their corresponding color and alpha components. The pixel at coordinate 
<img src="javaaa39.gif">	 is stored in the pixel array at index 
<pre>
</pre></a>

<dd><a name="999687"><img src="javaaa40.gif">
<pre>
</pre></a>

<dd><a name="999688">The pixels delivered using this method are all stored as bytes.
<pre>
</pre></a>
<dl>
<dt><a name="999689"><b>Parameters:
</b></a><dd><a name="999690"><code>x
- </code></a><a name="999691">left coordinate of rectangle
</a>
<dd><a name="999692"><code>y
- </code></a><a name="999693">top coordinte of rectangle
</a>
<dd><a name="999694"><code>w
- </code></a><a name="999695">width of rectangle
</a>
<dd><a name="999696"><code>h
- </code></a><a name="999697">height of rectangle
</a>
<dd><a name="999698"><code>model
- </code></a><a name="999699">color model for bits
</a>
<dd><a name="999700"><code>pixels
- </code></a><a name="999701">array of bits
</a>
<dd><a name="999702"><code>off
- </code></a><a name="999703">offset for first element
</a>
<dd><a name="999704"><code>scansize
- </code></a><a name="999705">number of elements per row
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setPixels">
<a name="999709"><h3>setPixels
</h3></a>
<a name="999710"><code>public abstract void<br>
setPixels(int &#32;x, int &#32;y, int &#32;w, int &#32;h, ColorModel model, <br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;int &#32;pixels[], int &#32;off, int &#32;scansize)
</code></a>
<dl>
<dd><a name="999711">The image producer calls the setPixels method of the image consumer one 
or more times to deliver the pixels of the image. Each call specifies the 
location and size of the rectangle of source pixels that are contained in the 
array of pixels. 
<pre>
</pre></a>

<dd><a name="999712">The specified color model object should be used to convert the pixels into 
their corresponding color and alpha components. The pixel at coordinate 
<img src="javaaa41.gif">	 is stored in the pixel array at index 
<pre>
</pre></a>

<dd><a name="999719"><img src="javaaa42.gif">
<pre>
</pre></a>

<dd><a name="999720">The pixels delivered using this method are all stored as integers.
<pre>
</pre></a>
<dl>
<dt><a name="999721"><b>Parameters:
</b></a><dd><a name="999722"><code>x
- </code></a><a name="999723">left coordinate of rectangle
</a>
<dd><a name="999724"><code>y
- </code></a><a name="999725">top coordinte of rectangle
</a>
<dd><a name="999726"><code>w
- </code></a><a name="999727">width of rectangle
</a>
<dd><a name="999728"><code>h
- </code></a><a name="999729">height of rectangle
</a>
<dd><a name="999730"><code>model
- </code></a><a name="999731">color model for bits
</a>
<dd><a name="999732"><code>pixels
- </code></a><a name="999733">array of bits
</a>
<dd><a name="999734"><code>off
- </code></a><a name="999735">offset for first element
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setProperties">
<a name="999739"><h3>setProperties
</h3></a>
<a name="999740"><code>public abstract void setProperties(Hashtable &#32;props)
</code></a>
<dl>
<dd><a name="999741">The image producer calls the setProperties method of the image consumer to 
indicate additional properties of the image.
<pre>
</pre></a>

<dd><a name="999742">All keys to the hash table are strings. The corresponding values depend on 
the string. 
<pre>
</pre></a>
<dl>
<dt><a name="999743"><b>Parameters:
</b></a><dd><a name="999744"><code>props
- </code></a><a name="999745">a hashtable of properties
</a>

<dt><a name="999746"><b>See Also:
</b></a><dd><a name="1001382">getProperty in class Image <a href="javai5.htm#15043">(II-&#167;1.24.6)</a>.
</a>
</dl></dl>

<hr>
<!-- This inserts footnotes--><p>
<pre><a href="javabooa.htm">Packages</a>  <a href="javak.htm">This Package</a>  <a href="javai9.htm">Prev</a>  <a href="javag11.htm">Next</a>  <a href="javabook.htm">Index</a></pre>
<font size=-1>Java API Document (HTML generated by dkramer on April 22, 1996)<br>
<a href="copyrigh.htm">Copyright &#169 1996 Sun Microsystems, Inc.</a>
All rights reserved<br>
Please send any comments or corrections to <a href="mailto:doug.kramer@sun.com"-->doug.kramer@sun.com</a>
</font>
</body></html>
