<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Sat Aug 30 15:44:46 PDT 1997 -->
<title>
  Class java.awt.image.CropImageFilter
</title>
</head>
<body>
<a name="_top_"></a>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-java.awt.image.html">This Package</a>  <a href="java.awt.image.ColorModel.html#_top_">Previous</a>  <a href="java.awt.image.DirectColorModel.html#_top_">Next</a>  <a href="a-names.html">Index</a></pre>
<hr>
<h1>
  Class java.awt.image.CropImageFilter
</h1>
<pre>
<a href="java.lang.Object.html#_top_">java.lang.Object</a>
   |
   +----<a href="java.awt.image.ImageFilter.html#_top_">java.awt.image.ImageFilter</a>
           |
           +----java.awt.image.CropImageFilter
</pre>
<hr>
<dl>
  <dt> public class <b>CropImageFilter</b>
  <dt> extends <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
</dl>
An ImageFilter class for cropping images.
 This class extends the basic ImageFilter Class to extract a given
 rectangular region of an existing Image and provide a source for a
 new image containing just the extracted region.  It is meant to
 be used in conjunction with a FilteredImageSource object to produce
 cropped versions of existing images.
<p>
<dl>
    <dt> <b>See Also:</b>
    <dd> <a href="java.awt.image.FilteredImageSource.html#_top_">FilteredImageSource</a>, <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
</dl>
<hr>
<a name="index"></a>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#CropImageFilter(int, int, int, int)"><b>CropImageFilter</b></a>(int, int, int, int)
  <dd>  Constructs a CropImageFilter that extracts the absolute rectangular
 region of pixels from its source Image as specified by the x, y,
 w, and h parameters.
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setDimensions(int, int)"><b>setDimensions</b></a>(int, int)
  <dd>  Override the source image's dimensions and pass the dimensions
 of the rectangular cropped region to the ImageConsumer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)"><b>setPixels</b></a>(int, int, int, int, ColorModel, byte[], int, int)
  <dd>  Determine whether the delivered byte pixels intersect the region to
 be extracted and passes through only that subset of pixels that
 appear in the output region.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setPixels(int, int, int, int, java.awt.image.ColorModel, int[], int, int)"><b>setPixels</b></a>(int, int, int, int, ColorModel, int[], int, int)
  <dd>  Determine if the delivered int pixels intersect the region to
 be extracted and pass through only that subset of pixels that
 appear in the output region.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setProperties(java.util.Hashtable)"><b>setProperties</b></a>(Hashtable)
  <dd>  Passes along  the properties from the source object after adding a
 property indicating the cropped region.
</dl>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="CropImageFilter"></a>
<a name="CropImageFilter(int, int, int, int)"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>CropImageFilter</b>
<pre>
 public CropImageFilter(int x,
                        int y,
                        int w,
                        int h)
</pre>
<dl>
  <dd> Constructs a CropImageFilter that extracts the absolute rectangular
 region of pixels from its source Image as specified by the x, y,
 w, and h parameters.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> x - the x location of the top of the rectangle to be extracted
    <dd> y - the y location of the top of the rectangle to be extracted
    <dd> w - the width of the rectangle to be extracted
    <dd> h - the height of the rectangle to be extracted
  </dl></dd>
</dl>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="setProperties(java.util.Hashtable)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setProperties"><b>setProperties</b></a>
<pre>
 public void setProperties(<a href="java.util.Hashtable.html#_top_">Hashtable</a> props)
</pre>
<dl>
  <dd> Passes along  the properties from the source object after adding a
 property indicating the cropped region.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.awt.image.ImageFilter.html#setProperties(java.util.Hashtable)">setProperties</a> in class <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
  </dl></dd>
</dl>
<a name="setDimensions(int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setDimensions"><b>setDimensions</b></a>
<pre>
 public void setDimensions(int w,
                           int h)
</pre>
<dl>
  <dd> Override the source image's dimensions and pass the dimensions
 of the rectangular cropped region to the ImageConsumer.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.awt.image.ImageFilter.html#setDimensions(int, int)">setDimensions</a> in class <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
    <dt> <b>See Also:</b>
    <dd> <a href="java.awt.image.ImageConsumer.html#_top_">ImageConsumer</a>
  </dl></dd>
</dl>
<a name="setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setPixels"><b>setPixels</b></a>
<pre>
 public void setPixels(int x,
                       int y,
                       int w,
                       int h,
                       <a href="java.awt.image.ColorModel.html#_top_">ColorModel</a> model,
                       byte pixels[],
                       int off,
                       int scansize)
</pre>
<dl>
  <dd> Determine whether the delivered byte pixels intersect the region to
 be extracted and passes through only that subset of pixels that
 appear in the output region.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.awt.image.ImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)">setPixels</a> in class <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
  </dl></dd>
</dl>
<a name="setPixels(int, int, int, int, java.awt.image.ColorModel, int[], int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setPixels"><b>setPixels</b></a>
<pre>
 public void setPixels(int x,
                       int y,
                       int w,
                       int h,
                       <a href="java.awt.image.ColorModel.html#_top_">ColorModel</a> model,
                       int pixels[],
                       int off,
                       int scansize)
</pre>
<dl>
  <dd> Determine if the delivered int pixels intersect the region to
 be extracted and pass through only that subset of pixels that
 appear in the output region.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.awt.image.ImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, int[], int, int)">setPixels</a> in class <a href="java.awt.image.ImageFilter.html#_top_">ImageFilter</a>
  </dl></dd>
</dl>
<hr>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-java.awt.image.html">This Package</a>  <a href="java.awt.image.ColorModel.html#_top_">Previous</a>  <a href="java.awt.image.DirectColorModel.html#_top_">Next</a>  <a href="a-names.html">Index</a></pre>
</body>
</html>
