<html><head><title>Class RGBImageFilter</title></head>
<!--Intermediate split file from a FrameMaker file-->
<body bgcolor=#ffffff>

<pre><a href="javabooa.htm">Packages</a>  <a href="javak.htm">This Package</a>  <a href="java.awt.image.PixelGrabber.html">Prev</a>  <a href="java.awt.image.ImageConsumer.html">Next</a>  <a href="javabook.htm">Index</a>  </pre>


<hr>
<a name="999012"><h1>	&#167;2.9 Class RGBImageFilter</h1></a>
<pre>public &#32;abstract &#32;class &#32;java.awt.image.<strong>RGBImageFilter
</strong>    extends &#32;java.awt.image.<strong>ImageFilter</strong> &#32;<a href="java.awt.image.ImageFilter.html#997569">(II-&#167;2.5)</a>
{
 &#32; &#32; &#32; &#32;// Fields
    protected boolean <strong>canFilterIndexColorModel</strong>;	<a href="java.awt.image.RGBImageFilter.html#999099">&#167;2.9.1</a>
    protected ColorModel <strong>newmodel</strong>;	<a href="java.awt.image.RGBImageFilter.html#999118">&#167;2.9.2</a>
    protected ColorModel <strong>origmodel</strong>;	<a href="java.awt.image.RGBImageFilter.html#999127">&#167;2.9.3</a>

 &#32; &#32; &#32; &#32;// Constructors
    public <strong>RGBImageFilter</strong>();	<a href="java.awt.image.RGBImageFilter.html#999138">&#167;2.9.4</a>

 &#32; &#32; &#32; &#32;// Methods
    public IndexColorModel 	<a href="java.awt.image.RGBImageFilter.html#999145">&#167;2.9.5</a>
        <strong>filterIndexColorModel</strong>(IndexColorModel &#32;icm);
    public abstract int <strong>filterRGB</strong>(int &#32;x, int &#32;y, int &#32;rgb);	<a href="java.awt.image.RGBImageFilter.html#999162">&#167;2.9.6</a>
 &#32; &#32;public void <strong>filterRGBPixels</strong>(int &#32;x, int &#32;y, int &#32;w,	<a href="java.awt.image.RGBImageFilter.html#999195">&#167;2.9.7</a>
 &#32; &#32; &#32; &#32; &#32;int &#32;h, int &#32;pixels[], int &#32;off, int &#32;scansize);
    public void <strong>setColorModel</strong>(ColorModel &#32;model);	<a href="java.awt.image.RGBImageFilter.html#999238">&#167;2.9.8</a>
    public void <strong>setPixels</strong>(int &#32;x, int &#32;y, int &#32;w, int &#32;h,	<a href="java.awt.image.RGBImageFilter.html#999288">&#167;2.9.9</a>
 &#32; &#32; &#32; &#32; &#32; &#32;ColorModel &#32;model, byte &#32;pixels[], ;int &#32;off, int &#32;scansize);
    public void <strong>setPixels</strong>(int &#32;x, int &#32;y, int &#32;w, int &#32;h	<a href="java.awt.image.RGBImageFilter.html#999340">&#167;2.9.10</a>
 &#32; &#32; &#32; &#32; &#32;  ColorModel &#32;model, int &#32;pixels[], int &#32;off, int &#32;scansize);
    public void <strong>tituteColorModel</strong>(ColorModel &#32;oldcm, 	<a href="java.awt.image.RGBImageFilter.html#999392">&#167;2.9.11</a>
  &#32; &#32; &#32; &#32; &#32; ColorModel &#32;newcm);
}
</pre><a name="999072">This class provides an easy way to create an image filter <a href="java.awt.image.ImageFilter.html#997569">(II-&#167;2.5)</a> which modifies the pixels of the original image by converting them one at a time in the default RGB color 
model &#32;<a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a>.
</a><p><a name="999076">Objects of this class are meant to be used in conjunction with a filtered image 
source &#32;<a href="java.awt.image.FilteredImageSource.html#997374">(II-&#167;2.4)</a> object to produce filtered versions of existing images.
</a><p><a name="999080">This class is an abstract class. It provides the calls needed to channel all the pixel data 
through a single method which converts pixels, one at a time, into the default RGB color 
model, regardless of the color model being used by the image producer. The only method 
which needs to be defined to create a useable image filter is the filterRGB method. 
</a><p><a name="999081">Here is an example of a filter which swaps the red and blue components of an image: 
</a><p><pre><hr>
<a name="999082">class &#32;RedBlueSwapFilter &#32;extends &#32;RGBImageFilter &#32;{
</a><a name="999083"> &#32; &#32; &#32; &#32;public &#32;RedBlueSwapFilter() &#32;{
</a><a name="999084"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;// &#32;The &#32;filter's &#32;operation &#32;does &#32;not &#32;depend &#32;on &#32;the
</a><a name="999085"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;// &#32;pixel's &#32;location, &#32;so &#32;IndexColorModels &#32;can &#32;be
</a><a name="999086"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;// &#32;filtered &#32;directly.
</a><a name="999087"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;canFilterIndexColorModel &#32;= &#32;true;
</a><a name="999088"> &#32; &#32; &#32; &#32;}
</a><a name="999089"> &#32; &#32; &#32; &#32;public &#32;int &#32;filterRGB(int &#32;x, &#32;int &#32;y, &#32;int &#32;rgb) &#32;{
</a><a name="999090"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;return &#32;((rgb &#32;&amp; &#32;0xff00ff00)
</a><a name="999091"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;| &#32;((rgb &#32;&amp; &#32;0xff0000) &#32;&gt;&gt; &#32;16)
</a><a name="999092"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;| &#32;((rgb &#32;&amp; &#32;0xff) &#32;&lt;&lt; &#32;16)); 
</a><a name="999093"> &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;}
</a><a name="999094">}
</a>
<hr></pre>
<hr>
<a name="999095"><h2>
<img src="images/fields.gif" width=153 height=38 alt="Fields">
</h2></a>


<META NAME="keywords" CONTENT="canFilterIndexColorModel">
<a name="999099"><h3>canFilterIndexColorModel
</h3></a>
<a name="999100"><code>protected boolean canFilterIndexColorModel
</code></a>
<dl>
<dd><a name="999101">Setting this value to true indicates that the the value returned by the filterRGB method &#32;<a href="java.awt.image.RGBImageFilter.html#999162">(II-&#167;2.9.6)</a> is independent of the x and y arguments, and 
depends only on the rgb argument.
<pre>
</pre></a>

<dd><a name="999105">Subclasses of RGBImageFilter should set this field to true in their constructor 
if their filterRGB method does not depend on the coordinate of the pixel 
being filtered. Filtering the colormap entries of an indexed color map can 
be much faster than filtering every pixel.
<pre>
</pre></a>

<dd><a name="1001369">The default value is false.
<pre>
</pre></a>
<dl>
<dt><a name="1001370"><b>See Also:
</b></a><dd><a name="1001374">substituteColorModel &#32;<a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a><br>
IndexColorModel &#32;<a href="java.awt.image.IndexColorModel.html#997889">(II-&#167;2.6)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="newmodel">
<a name="999118"><h3>newmodel
</h3></a>
<a name="999119"><code>protected ColorModel newmodel
</code></a>
<dl>
<dd><a name="999120">This field is used to remember the newcm argument passed to the substituteColorModel <a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a> method.
<pre>
</pre></a>
</dl>

<META NAME="keywords" CONTENT="origmodel">
<a name="999127"><h3>origmodel
</h3></a>
<a name="999128"><code>protected ColorModel origmodel
</code></a>
<dl>
<dd><a name="999129">This field is used to remember the oldcm argument passed to the substituteColorModel <a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a> method.
<pre>
</pre></a>
</dl>
<hr>
<a name="999134"><h2>
<img src="images/constrct.gif" width=231 height=38 alt="Constructors">
</h2></a>


<META NAME="keywords" CONTENT="RGBImageFilter">
<a name="999138"><h3>RGBImageFilter
</h3></a>
<a name="999139"><code>public RGBImageFilter()
</code></a>
<dl>
<dd><a name="999140">The default constructor.
<pre>
</pre></a>
</dl>
<hr>
<a name="999141"><h2>
<img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2></a>


<META NAME="keywords" CONTENT="filterIndexColorModel">
<a name="999145"><h3>filterIndexColorModel
</h3></a>
<a name="999146"><code>public IndexColorModel<br>
filterIndexColorModel(IndexColorModel &#32;icm)
</code></a>
<dl>
<dd><a name="999150">Filters an index color model <a href="java.awt.image.IndexColorModel.html#997889">(II-&#167;2.6)</a> object by running each entry in its 
color table through the filterRGB method <a href="java.awt.image.RGBImageFilter.html#999162">(II-&#167;2.9.6)</a>. The call to filterRGB 
has the x and y arguments set to -1 as a flag to indicate that a color table 
entry is being filtered rather than an actual pixel value.
<pre>
</pre></a>
<dl>
<dt><a name="999154"><b>Parameters:
</b></a><dd><a name="999155"><code>icm
- </code></a><a name="999156">the index color model object to be filtered
</a>

<dt><a name="999157"><b>Returns:
</b></a><dd><a name="999158">a new index color model with the filtered colors.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="filterRGB">
<a name="999162"><h3>filterRGB
</h3></a>
<a name="999163"><code>public abstract int filterRGB(int &#32;x, int &#32;y, int &#32;rgb)
</code></a>
<dl>
<dd><a name="1000713">Specifies a method to convert a single input pixel, whose value is specified 
in the default RGB color model &#32;<a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a>, to a new pixel value also in the 
default RGB color model. Subclasses of RGBImageFilter must provide a 
definition for this method.
<pre>
</pre></a>

<dd><a name="999173">If the value of the field canFilterIndexColorModel <a href="java.awt.image.RGBImageFilter.html#999099">(II-&#167;2.9.1)</a> is true, then the 
value returned by this method must not depend on the x and y coordinates.
<pre>
</pre></a>

<dd><a name="999174">If the x and y arguments are both -1, this method is being called by the filterIndexColorModel method <a href="java.awt.image.RGBImageFilter.html#999145">(II-&#167;2.9.5)</a>.
<pre>
</pre></a>
<dl>
<dt><a name="999178"><b>Parameters:
</b></a><dd><a name="999179"><code>x
- </code></a><a name="999180">the x coordinate of the pixel
</a>
<dd><a name="999181"><code>y
- </code></a><a name="999182">the y coordinate of the pixel
</a>
<dd><a name="999183"><code>rgb
- </code></a><a name="999184">the value of the pixel, in the default RGB color model
</a>

<dt><a name="999185"><b>Returns:
</b></a><dd><a name="999186">the new value of the pixel, in the default RGB color model.
</a>

<dt><a name="999187"><b>See Also:
</b></a><dd><a name="999191">filterRGBPixels &#32;<a href="java.awt.image.RGBImageFilter.html#999195">(II-&#167;2.9.7)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="filterRGBPixels">
<a name="999195"><h3>filterRGBPixels
</h3></a>
<a name="999196"><code>public void<br>
filterRGBPixels(int &#32;x, int &#32;y, int &#32;w, int &#32;h,<br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;int &#32;pixels[], int &#32;off, int &#32;scansize)
</code></a>
<dl>
<dd><a name="999197">Filters a buffer of pixels in the default RGB color model &#32;<a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a> by 
passing them one by one through the filterRGB &#32;method <a href="java.awt.image.RGBImageFilter.html#999162">(II-&#167;2.9.6)</a>. 
<pre>
</pre></a>

<dd><a name="999210">The setPixels method <a href="java.awt.image.ImageConsumer.html#999709">(II-&#167;2.10.15)</a> of the filter's consumer <a href="java.awt.image.ImageFilter.html#997654">(II-&#167;2.5.1)</a> is 
then called with the resulting buffer and the color model argument set to 
the default RGB color model.
<pre>
</pre></a>

<dd><a name="999211">Only pixels that fall within the specified rectangle are modified. The value 
of the pixel at coordinate <img src="javaaa36.gif"> is stored in the pixel array at index 
<img src="javaaa37.gif">
<pre>
</pre></a>
<dl>
<dt><a name="999218"><b>Parameters:
</b></a><dd><a name="999219"><code>x
- </code></a><a name="999220">left coordinate of rectangle
</a>
<dd><a name="999221"><code>y
- </code></a><a name="999222">top coordinte of rectangle
</a>
<dd><a name="999223"><code>w
- </code></a><a name="999224">width of rectangle
</a>
<dd><a name="999225"><code>h
- </code></a><a name="999226">height of rectangle
</a>
<dd><a name="999227"><code>model
- </code></a><a name="999228">color model for bits
</a>
<dd><a name="999229"><code>pixels
- </code></a><a name="999230">array of bits
</a>
<dd><a name="999231"><code>off
- </code></a><a name="999232">offset for first element
</a>
<dd><a name="999233"><code>scansize
- </code></a><a name="999234">number of elements per row
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setColorModel">
<a name="999238"><h3>setColorModel
</h3></a>
<a name="999239"><code>public void setColorModel(ColorModel &#32;model)
</code></a>
<dl>
<dd><a name="999240">The image producer calls the setColorModel method to specify the color 
model for the majority of the subsequent setPixels method calls. For more 
information on this method and its model argument, see <a href="java.awt.image.ImageConsumer.html#999623">&#167;2.10.11</a> on 
<a href="java.awt.image.ImageConsumer.html#999623">page &#32;305</a>
<pre>
</pre></a>

<dd><a name="999247">The setColorModel method of RGBImageFilter determines if the color model 
argument is an index color model <a href="java.awt.image.IndexColorModel.html#997889">(II-&#167;2.6)</a> and if the canFilterIndexColorModel field <a href="java.awt.image.RGBImageFilter.html#999099">(II-&#167;2.9.1)</a> is true.
<pre>
</pre></a>

<dd><a name="999254">If both conditions are true, the method creates a new color model by calling the filterIndexColorModel method <a href="java.awt.image.RGBImageFilter.html#999145">(II-&#167;2.9.5)</a> on the model argument. The 
original color model and the newly created color model are then passed as 
arguments to the substituteColorModel <a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a> method. In addition, the 
setColorModel method <a href="java.awt.image.RGBImageFilter.html#999238">(II-&#167;2.9.8)</a> of the filter's consumer <a href="java.awt.image.ImageFilter.html#997654">(II-&#167;2.5.1)</a> is 
called with the newly created color model.
<pre>
</pre></a>

<dd><a name="999267">If either condition is false, the method calls the the setColorModel method 
<a href="java.awt.image.ImageConsumer.html#999623">(II-&#167;2.10.11)</a> of its consumer <a href="java.awt.image.ImageFilter.html#997654">(II-&#167;2.5.1)</a> with the default RGB color map 
<a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a>.
<pre>
</pre></a>
<dl>
<dt><a name="999277"><b>Parameters:
</b></a><dd><a name="999278"><code>model
- </code></a><a name="999279">a color map used in subsequent setPixel calls
</a>

<dt><a name="999280"><b>Overrides:
</b></a><dd><a name="999284">setColorModel in class ImageFilter &#32;<a href="java.awt.image.ImageFilter.html#997746">(II-&#167;2.5.7)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setPixels">
<a name="999288"><h3>setPixels
</h3></a>
<a name="999289"><code>public void<br>
setPixels(int &#32;x, int &#32;y, int &#32;w, int &#32;h, ColorModel model, <br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;byte &#32;pixels[], int &#32;off, &#32;int &#32;scansize)
</code></a>
<dl>
<dd><a name="999290">The image producer calls the setPixels method of the image consumer one 
or more times to deliver the pixels of the image. For more information on 
this method and its arguments, see <a href="java.awt.image.ImageConsumer.html#999677">&#167;2.10.14</a> on <a href="java.awt.image.ImageConsumer.html#999677">page &#32;307</a>.
<pre>
</pre></a>

<dd><a name="999297">The setPixels method of RGBImageFilter looks to see if the color model is the 
same one that has already been converted and remembered for substitution 
by a previous call to the substituteColorModel <a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a> method. 
<pre>
</pre></a>

<dd><a name="999307">If so, it calls the setPixels method <a href="java.awt.image.ImageConsumer.html#999677">(II-&#167;2.10.14)</a> of its consumer <a href="java.awt.image.ImageFilter.html#997654">(II-&#167;2.5.1)</a>, 
changing the color model argument to be the alternative color model.
<pre>
</pre></a>

<dd><a name="999308">Otherwise, the method converts the buffer of byte pixels to the default 
RGB color model <a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a> and passes the converted buffer to the filterRGBPixels <a href="java.awt.image.RGBImageFilter.html#999195">(II-&#167;2.9.7)</a> method to be converted one by one.
<pre>
</pre></a>
<dl>
<dt><a name="999315"><b>Parameters:
</b></a><dd><a name="999316"><code>x
- </code></a><a name="999317">left coordinate of rectangle
</a>
<dd><a name="999318"><code>y
- </code></a><a name="999319">top coordinte of rectangle
</a>
<dd><a name="999320"><code>w
- </code></a><a name="999321">width of rectangle
</a>
<dd><a name="999322"><code>h
- </code></a><a name="999323">height of rectangle
</a>
<dd><a name="999324"><code>model
- </code></a><a name="999325">color model for bits
</a>
<dd><a name="999326"><code>pixels
- </code></a><a name="999327">array of bits
</a>
<dd><a name="999328"><code>off
- </code></a><a name="999329">offset for first element
</a>
<dd><a name="999330"><code>scansize
- </code></a><a name="999331">number of elements per row
</a>

<dt><a name="999332"><b>Overrides:
</b></a><dd><a name="999336">setPixels in class ImageFilter &#32;<a href="java.awt.image.ImageFilter.html#997799">(II-&#167;2.5.10)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="setPixels">
<a name="999340"><h3>setPixels
</h3></a>
<a name="999341"><code>public void<br>
setPixels(int &#32;x, int &#32;y, int &#32;w, int &#32;h, ColorModel model, <br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;int &#32;pixels[], int &#32;off, int &#32;scansize)
</code></a>
<dl>
<dd><a name="999342">The image producer calls the setPixels method of the image consumer one 
or more times to deliver the pixels of the image. For more information on 
this method and its arguments, see <a href="java.awt.image.ImageConsumer.html#999709">&#167;2.10.15</a> on <a href="java.awt.image.ImageConsumer.html#999709">page &#32;308</a>.
<pre>
</pre></a>

<dd><a name="999349">The setPixels method of RGBImageFilter looks to see if the color model is the 
same one that has already been converted and remembered for substitution 
by a previous call to the substituteColorModel <a href="java.awt.image.RGBImageFilter.html#999392">(II-&#167;2.9.11)</a> method.
<pre>
</pre></a>

<dd><a name="999356">If so, it calls the setPixels method <a href="java.awt.image.ImageConsumer.html#999677">(II-&#167;2.10.14)</a> of the filter's consumer 
<a href="java.awt.image.ImageFilter.html#997654">(II-&#167;2.5.1)</a>, changing the color model argument to be the alternative color 
model.
<pre>
</pre></a>

<dd><a name="999360">Otherwise, the method converts the buffer of byte pixels to the default 
RGB color model <a href="java.awt.image.ColorModel.html#1001364">(II-&#167;2.1.9)</a> and passes the converted buffer to the filterRGBPixels <a href="java.awt.image.RGBImageFilter.html#999195">(II-&#167;2.9.7)</a> method to be converted one by one.
<pre>
</pre></a>
<dl>
<dt><a name="999367"><b>Parameters:
</b></a><dd><a name="999368"><code>x
- </code></a><a name="999369">left coordinate of rectangle
</a>
<dd><a name="999370"><code>y
- </code></a><a name="999371">top coordinte of rectangle
</a>
<dd><a name="999372"><code>w
- </code></a><a name="999373">width of rectangle
</a>
<dd><a name="999374"><code>h
- </code></a><a name="999375">height of rectangle
</a>
<dd><a name="999376"><code>model
- </code></a><a name="999377">color model for bits
</a>
<dd><a name="999378"><code>pixels
- </code></a><a name="999379">array of bits
</a>
<dd><a name="999380"><code>off
- </code></a><a name="999381">offset for first element
</a>
<dd><a name="999382"><code>scansize
- </code></a><a name="999383">number of elements per row
</a>

<dt><a name="999384"><b>Overrides:
</b></a><dd><a name="999388">setPixels in class ImageFilter &#32;<a href="java.awt.image.ImageFilter.html#997832">(II-&#167;2.5.11)</a>.
</a>
</dl></dl>

<META NAME="keywords" CONTENT="substituteColorModel">
<a name="999392"><h3>substituteColorModel
</h3></a>
<a name="999393"><code>public void substituteColorModel(ColorModel &#32;oldcm,<br>
 &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32; &#32;ColorModel &#32;newcm)
</code></a>
<dl>
<dd><a name="999394">Registers two color model objects for substitution: If the oldcm is the color 
model during any subsequent call to either of the setPixels methods (<a href="java.awt.image.RGBImageFilter.html#999288">&#167;2.9.9</a>, 
<a href="java.awt.image.RGBImageFilter.html#999340">&#167;2.9.10</a>), the newcm argument is substituted and the pixels passed through 
unmodifed.
<pre>
</pre></a>
<dl>
<dt><a name="999402"><b>Parameters:
</b></a><dd><a name="999403"><code>oldcm
- </code></a><a name="999404">the ColorModel object to be replaced on the fly
</a>
<dd><a name="999405"><code>newcm
- </code></a><a name="999406">the ColorModel object to replace oldcm on the fly
</a>
</dl></dl><!--"RightPage" is inserted just before the classes begin.  Don't convert its text.-->
<!--Forces heading to right page-->

<hr>
<!-- This inserts footnotes--><p>
<pre><a href="javabooa.htm">Packages</a>  <a href="javak.htm">This Package</a>  <a href="java.awt.image.PixelGrabber.html">Prev</a>  <a href="java.awt.image.ImageConsumer.html">Next</a>  <a href="javabook.htm">Index</a></pre>
<font size=-1>Java API Document (HTML generated by dkramer on April 22, 1996)<br>
<a href="copyrigh.htm">Copyright &#169 1996 Sun Microsystems, Inc.</a>
All rights reserved<br>
Please send any comments or corrections to <a href="mailto:doug.kramer@sun.com">doug.kramer@sun.com</a>
</font>
</body></html>